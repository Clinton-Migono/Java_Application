package home;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class contact extends javax.swing.JFrame{

	  /**
     * Creates new form contact
     */
	 public contact() {
	        initComponents();
	        Connector();
	        select_users();
	    }
	    
	    Connection conn;
	    PreparedStatement pst;
	   private String fname,lname,email,phone,p_address;
	    
	     public void Connector() {
	    	
	    	try {
				Class.forName("com.mysql.cj.jdbc.Driver");
				conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/directory","root","");
//				System.out.println("Database Connected");
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
	                        System.out.println("MySQL JDBC Driver not found");
				e.printStackTrace();
			} catch (SQLException e) {
				// TODO Auto-generated catch block
	                        System.out.println("Connection Failed");
				e.printStackTrace();
			}
	    }
	     public void closeConnection(){
	    
	    try{
	        if (pst!= null){
	            pst.close();
	        }
	        if (conn!= null){
	            conn.close();
	        }
	    
	    }catch(SQLException e){
	        e.printStackTrace();
	    }
	    
	    }
	    
	    /**
	     * This method is called from within the constructor to initialize the form.
	     * WARNING: Do NOT modify this code. The content of this method is always
	     * regenerated by the Form Editor.
	     */
	    @SuppressWarnings("unchecked")
	    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
	    private void initComponents() {

	        jPopupMenu1 = new javax.swing.JPopupMenu();
	        jMenu3 = new javax.swing.JMenu();
	        jComboBox1 = new javax.swing.JComboBox<>();
	        jPanel1 = new javax.swing.JPanel();
	        jPanel2 = new javax.swing.JPanel();
	        jLabel2 = new javax.swing.JLabel();
	        jLabel3 = new javax.swing.JLabel();
	        jLabel4 = new javax.swing.JLabel();
	        jLabel5 = new javax.swing.JLabel();
	        Fname = new javax.swing.JTextField();
	        Lname = new javax.swing.JTextField();
	        Phone = new javax.swing.JTextField();
	        Email = new javax.swing.JTextField();
	        P_address = new javax.swing.JTextField();
	        jLabel6 = new javax.swing.JLabel();
	        jLabel7 = new javax.swing.JLabel();
	        save = new javax.swing.JButton();
	        delete = new javax.swing.JButton();
	        update = new javax.swing.JButton();
	        jScrollPane1 = new javax.swing.JScrollPane();
	        contacts = new javax.swing.JTable();
	        jLabel1 = new javax.swing.JLabel();
	        jMenuBar1 = new javax.swing.JMenuBar();
	        logout = new javax.swing.JMenu();
	        ImageIcon image = new ImageIcon("phone-call.png"); //creates an image icon
			this.setIconImage(image.getImage());//set the image icon on the top left of the created window

	        jMenu3.setText("jMenu3");

	        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

	        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

	        jPanel1.setBackground(new java.awt.Color(0, 51, 51));

	        jPanel2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

	        jLabel2.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
	        jLabel2.setText("first name");

	        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 10)); // NOI18N
	        jLabel3.setForeground(new java.awt.Color(0, 51, 51));
	        jLabel3.setText("phone");

	        jLabel4.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
	        jLabel4.setForeground(new java.awt.Color(0, 51, 51));
	        jLabel4.setText("physical address");

	        jLabel5.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
	        jLabel5.setForeground(new java.awt.Color(0, 51, 51));
	        jLabel5.setText("email");

	        Fname.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
	        Fname.setForeground(new java.awt.Color(0, 51, 51));
	        Fname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	        Fname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 51)));
	        Fname.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

	        Lname.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
	        Lname.setForeground(new java.awt.Color(0, 51, 51));
	        Lname.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	        Lname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 51)));
	        Lname.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

	        Phone.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
	        Phone.setForeground(new java.awt.Color(0, 51, 51));
	        Phone.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	        Phone.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 51)));
	        Phone.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

	        Email.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
	        Email.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	        Email.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 51)));
	        Email.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

	        P_address.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
	        P_address.setForeground(new java.awt.Color(0, 51, 51));
	        P_address.setHorizontalAlignment(javax.swing.JTextField.CENTER);
	        P_address.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(0, 51, 51)));
	        P_address.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

	        jLabel6.setFont(new java.awt.Font("SansSerif", 1, 10)); // NOI18N
	        jLabel6.setText("last name");

	        jLabel7.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
	        jLabel7.setForeground(new java.awt.Color(0, 51, 51));
	        jLabel7.setText("Personal Information");

	        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
	        jPanel2.setLayout(jPanel2Layout);
	        jPanel2Layout.setHorizontalGroup(
	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
	                .addContainerGap(55, Short.MAX_VALUE)
	                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addComponent(jLabel6)
	                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                        .addComponent(jLabel2)
	                        .addComponent(jLabel4)
	                        .addComponent(P_address, javax.swing.GroupLayout.DEFAULT_SIZE, 265, Short.MAX_VALUE)
	                        .addComponent(Email)
	                        .addComponent(Phone)
	                        .addComponent(jLabel5)
	                        .addComponent(jLabel3)
	                        .addComponent(Lname)
	                        .addComponent(Fname))
	                    .addGroup(jPanel2Layout.createSequentialGroup()
	                        .addGap(36, 36, 36)
	                        .addComponent(jLabel7)))
	                .addGap(51, 51, 51))
	        );
	        jPanel2Layout.setVerticalGroup(
	            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel2Layout.createSequentialGroup()
	                .addGap(18, 18, 18)
	                .addComponent(jLabel7)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
	                .addComponent(jLabel2)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(Fname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addComponent(jLabel6)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(Lname, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                .addComponent(jLabel3)
	                .addGap(8, 8, 8)
	                .addComponent(Phone, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(18, 18, 18)
	                .addComponent(jLabel5)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(Email, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(26, 26, 26)
	                .addComponent(jLabel4)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(P_address, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addGap(49, 49, 49))
	        );

	        save.setBackground(new java.awt.Color(102, 102, 102));
	        save.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
	        save.setForeground(new java.awt.Color(255, 255, 255));
	        save.setText("Save");
	        save.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                saveActionPerformed(evt);
	            }
	        });

	        delete.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
	        delete.setForeground(new java.awt.Color(204, 0, 0));
	        delete.setText("Delete");
	        delete.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                deleteActionPerformed(evt);
	            }
	        });

	        update.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
	        update.setForeground(new java.awt.Color(0, 51, 51));
	        update.setText("Update");
	        update.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                updateActionPerformed(evt);
	            }
	        });

	        contacts.setBackground(new java.awt.Color(102, 102, 102));
	        contacts.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
	        contacts.setForeground(new java.awt.Color(255, 255, 255));
	        contacts.setModel(new javax.swing.table.DefaultTableModel(
	            new Object [][] {
	                {null, null, null, null, null, null},
	                {null, null, null, null, null, null},
	                {null, null, null, null, null, null},
	                {null, null, null, null, null, null}
	            },
	            new String [] {
	                "ID", "First Name", "Last Name", "Phone", "Email", "Physical Address"
	            }
	        ));
	        contacts.setSelectionForeground(new java.awt.Color(204, 204, 204));
	        contacts.addMouseListener(new java.awt.event.MouseAdapter() {
	            public void mouseClicked(java.awt.event.MouseEvent evt) {
	                contactsMouseClicked(evt);
	            }
	        });
	        jScrollPane1.setViewportView(contacts);

	        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
	        jPanel1.setLayout(jPanel1Layout);
	        jPanel1Layout.setHorizontalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGap(39, 39, 39)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addGroup(jPanel1Layout.createSequentialGroup()
	                        .addGap(22, 22, 22)
	                        .addComponent(update)
	                        .addGap(48, 48, 48)
	                        .addComponent(save)
	                        .addGap(48, 48, 48)
	                        .addComponent(delete)))
	                .addGap(18, 18, 18)
	                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 916, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap(18, Short.MAX_VALUE))
	        );
	        jPanel1Layout.setVerticalGroup(
	            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(jPanel1Layout.createSequentialGroup()
	                .addGap(36, 36, 36)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
	                    .addComponent(jScrollPane1)
	                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	                .addGap(29, 29, 29)
	                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(update, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
	                .addContainerGap(50, Short.MAX_VALUE))
	        );

	        jLabel1.setBackground(new java.awt.Color(0, 51, 51));
	        jLabel1.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
	        jLabel1.setForeground(new java.awt.Color(0, 51, 51));
	        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        jLabel1.setText("Contacts");

	        logout.setForeground(new java.awt.Color(0, 51, 51));
	        logout.setText("Logout");
	        logout.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
	        logout.addMouseListener(new java.awt.event.MouseAdapter() {
	            public void mouseClicked(java.awt.event.MouseEvent evt) {
	                logoutMouseClicked(evt);
	            }
	        });
	        logout.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                logoutActionPerformed(evt);
	            }
	        });
	        jMenuBar1.add(logout);

	        setJMenuBar(jMenuBar1);

	        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
	        getContentPane().setLayout(layout);
	        layout.setHorizontalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
	                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addComponent(jLabel1)
	                .addGap(389, 389, 389))
	            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	        );
	        layout.setVerticalGroup(
	            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(layout.createSequentialGroup()
	                .addGap(29, 29, 29)
	                .addComponent(jLabel1)
	                .addGap(18, 18, 18)
	                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
	        );

	        pack();
	        setLocationRelativeTo(null);
	    }// </editor-fold>                        

	    private void saveActionPerformed(java.awt.event.ActionEvent evt) {                                     
	        // TODO add your handling code here:
	         try {
	            //            String fname,lname,email,pswd,cpswd;
	            fname=Fname.getText();
	            lname=Lname.getText();
	            phone=Phone.getText();
	            email=Email.getText();
	            p_address=P_address.getText();

	            pst =conn.prepareStatement("insert into contacts(fname,lname,phone,email,p_address)values(?,?,?,?,?)");

	            pst.setString(1,fname);
	            pst.setString(2,lname);
	            pst.setString(3,phone);
	            pst.setString(4,email);
	            pst.setString(5,p_address);

	            //            pst.executeUpdate();
	            //            JOptionPane.showMessageDialog(this,"Successfull Registration");

	            //clear the personal contact form
	                        Fname.setText("");
	                        Lname.setText("");
	                        Phone.setText("");
	                        Email.setText("");
	                        P_address.setText("");
	                        
	              int rowsAffected = pst.executeUpdate();

	            if (rowsAffected > 0){
	                System.out.println("Details saved successfully");
	                JOptionPane.showMessageDialog(this,"Details saved Successfully");
	                select_users();//when the users table gets updated, the method is called to load the new user
	            }else{
	                System.out.println("Failed to insert data");
	            }
	        } catch (SQLException ex) {
	            Logger.getLogger(contact.class.getName()).log(Level.SEVERE, null, ex);
	        }
	    }                                    

	    private void contactsMouseClicked(java.awt.event.MouseEvent evt) {                                      
	        // TODO add your handling code here:
	        DefaultTableModel model = (DefaultTableModel) contacts.getModel();
	        int selectedIndex = contacts.getSelectedRow();
	        
	        int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
	        Fname.setText(model.getValueAt(selectedIndex, 1).toString());
	        Lname.setText(model.getValueAt(selectedIndex, 2).toString());
	        Phone.setText(model.getValueAt(selectedIndex, 3).toString());
	        Email.setText(model.getValueAt(selectedIndex, 4).toString());
	        P_address.setText(model.getValueAt(selectedIndex, 5).toString());
	    }                                     

	    private void logoutActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        // TODO add your handling code here:
	                
	                
	        
	    }                                      

	    private void logoutMouseClicked(java.awt.event.MouseEvent evt) {                                    
	        // TODO add your handling code here:
	        dispose();
	        new login().setVisible(true);
	    }                                   

	    private void updateActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        // TODO add your handling code here:
	        try {
		            DefaultTableModel model = (DefaultTableModel) contacts.getModel();
	                    int selectedIndex = contacts.getSelectedRow();
	                    
	                    int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
	                    
		            fname=Fname.getText();
		            lname=Lname.getText();
		            phone=Phone.getText();
		            email=Email.getText();
		            p_address=P_address.getText();

		            pst =conn.prepareStatement("UPDATE contacts set fname=?,lname=?,phone=?,email=?,p_address=? WHERE id=?");

		            pst.setString(1,fname);
		            pst.setString(2,lname);
		            pst.setString(3,phone);
		            pst.setString(4,email);
		            pst.setString(5,p_address);
	                    pst.setInt(6,id);

		            //            pst.executeUpdate();
		            //            JOptionPane.showMessageDialog(this,"Successfull Registration");

		            //clear the personal contact form
		                        Fname.setText("");
		                        Lname.setText("");
		                        Phone.setText("");
		                        Email.setText("");
		                        P_address.setText("");
		                        
		              int rowsAffected = pst.executeUpdate();

		            if (rowsAffected > 0){
		                System.out.println("Data Updated successfully");
		                JOptionPane.showMessageDialog(this,"Details Updated Successfully");
		                select_users();//when the users table gets updated, the method is called to load the new user
		            }else{
		                System.out.println("Failed to update data");
		            }
		        } catch (SQLException ex) {
		            Logger.getLogger(contact.class.getName()).log(Level.SEVERE, null, ex);
		        }
	    }                                      

	    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {                                       
	        // TODO add your handling code here:
	         try {
		            DefaultTableModel model = (DefaultTableModel) contacts.getModel();
	                    int selectedIndex = contacts.getSelectedRow();
	                    
	                    int id = Integer.parseInt(model.getValueAt(selectedIndex, 0).toString());
	                    
		          
		            pst =conn.prepareStatement("DELETE FROM contacts WHERE id=?");

	                    pst.setInt(1,id);

		            //            pst.executeUpdate();
		            //            JOptionPane.showMessageDialog(this,"Successfull Registration");

		            //clear the personal contact form
		                        Fname.setText("");
		                        Lname.setText("");
		                        Phone.setText("");
		                        Email.setText("");
		                        P_address.setText("");
		                        
		              int rowsAffected = pst.executeUpdate();

		            if (rowsAffected > 0){
		                System.out.println("Deleted successfully");
		                JOptionPane.showMessageDialog(this,"Record Deleted");
		                select_users();//when the users table gets updated, the method is called to load the new user
		            }else{
		                System.out.println("Failed to delete data");
		            }
		        } catch (SQLException ex) {
		            Logger.getLogger(contact.class.getName()).log(Level.SEVERE, null, ex);
		        }
	    }                                      
	        
	    
	    private void select_users(){
	        int CC;
	        try{
	            pst = conn.prepareStatement("SELECT * FROM contacts");
	            ResultSet rs = pst.executeQuery();
	            ResultSetMetaData RSMD = rs.getMetaData();
	            CC = RSMD.getColumnCount();
	            DefaultTableModel DFT = (DefaultTableModel) contacts.getModel();
	            DFT.setRowCount(0);
	            
	            while (rs.next()){
	                Vector v2 = new Vector();
	                
	                for (int i=1;i<=CC;i++){
	                    v2.add(rs.getString("id"));
	                    v2.add(rs.getString("fname"));
	                    v2.add(rs.getString("lname"));
	                    v2.add(rs.getString("phone"));
	                    v2.add(rs.getString("email"));
	                    v2.add(rs.getString("p_address"));
	                }
	                DFT.addRow(v2);
	            }
	        
	        
	        }catch(Exception e){
	        
	        
	        }
	    
	    
	    }
	    /**
	     * @param args the command line arguments
	     */
	    public static void main(String args[]) {
	        /* Set the Nimbus look and feel */
	        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
	        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
	         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
	         */
	        try {
	            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
	                if ("Nimbus".equals(info.getName())) {
	                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
	                    break;
	                }
	            }
	        } catch (ClassNotFoundException ex) {
	            java.util.logging.Logger.getLogger(contact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (InstantiationException ex) {
	            java.util.logging.Logger.getLogger(contact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (IllegalAccessException ex) {
	            java.util.logging.Logger.getLogger(contact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
	            java.util.logging.Logger.getLogger(contact.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
	        }
	        //</editor-fold>

	        /* Create and display the form */
	        java.awt.EventQueue.invokeLater(new Runnable() {
	            public void run() {
	                new contact().setVisible(true);
	            }
	        });
	    }

	    // Variables declaration - do not modify                     
	    private javax.swing.JTextField Email;
	    private javax.swing.JTextField Fname;
	    private javax.swing.JTextField Lname;
	    private javax.swing.JTextField P_address;
	    private javax.swing.JTextField Phone;
	    private javax.swing.JTable contacts;
	    private javax.swing.JButton delete;
	    private javax.swing.JComboBox<String> jComboBox1;
	    private javax.swing.JLabel jLabel1;
	    private javax.swing.JLabel jLabel2;
	    private javax.swing.JLabel jLabel3;
	    private javax.swing.JLabel jLabel4;
	    private javax.swing.JLabel jLabel5;
	    private javax.swing.JLabel jLabel6;
	    private javax.swing.JLabel jLabel7;
	    private javax.swing.JMenu jMenu3;
	    private javax.swing.JMenuBar jMenuBar1;
	    private javax.swing.JPanel jPanel1;
	    private javax.swing.JPanel jPanel2;
	    private javax.swing.JPopupMenu jPopupMenu1;
	    private javax.swing.JScrollPane jScrollPane1;
	    private javax.swing.JMenu logout;
	    private javax.swing.JButton save;
	    private javax.swing.JButton update;
	    // End of variables declaration    
}
